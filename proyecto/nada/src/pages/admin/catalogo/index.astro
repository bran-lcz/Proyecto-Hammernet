---
import AdminLayout from '../../../layouts/AdminLayout.astro';
---

<AdminLayout title="Gestión de Catálogo">
    <div class="mb-6 flex justify-between items-center">
        <h1 class="text-2xl font-bold text-gray-800">Gestión de Catálogo</h1>
        <button id="btnNuevoProducto" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Nuevo Producto
        </button>
    </div>

    <!-- Buscador -->
    <div class="mb-6">
        <div class="flex">
            <input type="text" id="buscador" placeholder="Buscar productos..." class="flex-grow px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <button id="btnBuscar" class="bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded-r-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </button>
        </div>
    </div>

    <!-- Formulario para crear/editar producto (oculto por defecto) -->
    <div id="formProducto" class="bg-white rounded-lg shadow-md p-6 mb-6 hidden">
        <h2 id="formTitle" class="text-xl font-semibold mb-4">Nuevo Producto</h2>
        <form id="productoForm" class="space-y-4">
            <input type="hidden" id="productoId" value="">
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label for="nombre" class="block text-sm font-medium text-gray-700 mb-1">Nombre del Producto</label>
                    <input type="text" id="nombre" name="nombre" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div>
                    <label for="precio" class="block text-sm font-medium text-gray-700 mb-1">Precio</label>
                    <input type="number" id="precio" name="precio" min="0" step="1" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div>
                    <label for="stock" class="block text-sm font-medium text-gray-700 mb-1">Stock</label>
                    <input type="number" id="stock" name="stock" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div>
                    <label for="categoria" class="block text-sm font-medium text-gray-700 mb-1">Categoría</label>
                    <select id="categoria" name="categoria" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                        <option value="herramientas">Herramientas</option>
                        <option value="construccion">Construcción</option>
                        <option value="jardineria_y_exteriores">Jardinería y Exteriores</option>
                        <option value="electricidad">Electricidad</option>
                        <option value="plomeria">Plomería</option>
                        <option value="seguridad">Seguridad</option>
                        <option value="hogar_y_limpieza">Hogar y Limpieza</option>
                        <option value="pinturas">Pinturas</option>
                        <option value="tornillos_y_clavos">Tornillos y Clavos</option>
                    </select>
                </div>
            </div>
            
            <div>
                <label for="caracteristicas" class="block text-sm font-medium text-gray-700 mb-1">Características</label>
                <textarea id="caracteristicas" name="caracteristicas" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required></textarea>
                <p class="text-xs text-gray-500 mt-1">Separa las características con punto y coma (;)</p>
            </div>
            
            <div>
                <label for="descripcion" class="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
                <textarea id="descripcion" name="descripcion" rows="4" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" required></textarea>
            </div>
            
            <div>
                <label for="imagen" class="block text-sm font-medium text-gray-700 mb-1">Imagen del Producto</label>
                <div id="imagePreviewContainer" class="border-2 border-dashed border-gray-300 rounded-md p-4 text-center mb-2">
                    <img id="imagePreview" class="max-h-64 mx-auto hidden">
                    <p id="dragText" class="text-gray-500">Arrastra una imagen aquí o haz clic para seleccionar</p>
                    <input type="file" id="imageFileInput" accept="image/*" class="hidden">
                </div>
                <input type="hidden" id="imagen" name="imagen" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                <p class="text-xs text-gray-500 mt-1">La imagen se subirá automáticamente a Cloudinary al guardar el producto</p>
            </div>
            
            <div class="flex justify-end space-x-3">
                <button type="button" id="btnCancelar" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">Cancelar</button>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Guardar</button>
            </div>
        </form>
    </div>

    <!-- Tabla de productos -->
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Imagen</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Precio</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categoría</th>
                    <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                </tr>
            </thead>
            <tbody id="tablaProductos" class="bg-white divide-y divide-gray-200">
                <!-- Los productos se cargarán aquí dinámicamente -->
            </tbody>
        </table>
    </div>
</AdminLayout>

<script>
    // Importar funciones de API con autenticación
    import { getData, postData, updateData, deleteData } from '../../../scripts/api.js';
    import { API_URL } from '../../../scripts/config.js';
    
    // Verificar si el usuario está autenticado
    document.addEventListener('DOMContentLoaded', () => {
        const isLoggedIn = localStorage.getItem('isLoggedIn');
        const token = localStorage.getItem('token');
        
        console.log('Catálogo Index - Estado de autenticación:', isLoggedIn);
        console.log('Catálogo Index - Token:', token ? 'Token presente' : 'Token ausente');
        
        if (!isLoggedIn || isLoggedIn !== 'true' || !token) {
            console.warn('Usuario no autenticado o token ausente, redirigiendo al login');
            // Redirigir al login si no está autenticado o no tiene token
            window.location.href = '/login';
            return;
        }

        // Elementos del DOM
        const btnNuevoProducto = document.getElementById('btnNuevoProducto');
        const formProducto = document.getElementById('formProducto');
        const formTitle = document.getElementById('formTitle');
        const productoForm = document.getElementById('productoForm');
        const btnCancelar = document.getElementById('btnCancelar');
        const tablaProductos = document.getElementById('tablaProductos');
        const productoId = document.getElementById('productoId');
        const buscador = document.getElementById('buscador');
        const btnBuscar = document.getElementById('btnBuscar');
        
        // Elementos para la carga de imágenes
        const imagePreviewContainer = document.getElementById('imagePreviewContainer');
        const imagePreview = document.getElementById('imagePreview');
        const imageFileInput = document.getElementById('imageFileInput');
        const dragText = document.getElementById('dragText');
        const imagenInput = document.getElementById('imagen');
        
        // Variable para almacenar la imagen en base64
        let base64Image = null;
        let productos = [];

        // Función para obtener todos los productos desde la API
        async function obtenerProductos() {
            try {
                // Usar la función getData con autenticación
                productos = await getData('/productos');
                cargarProductos(productos);
            } catch (error) {
                console.error('Error:', error);
                // Si hay un error con la API, usar datos del localStorage como respaldo
                productos = JSON.parse(localStorage.getItem('productos')) || [];
                
                // Si no hay productos en localStorage, crear algunos por defecto
                if (productos.length === 0) {
                    productos = [
                        {
                            id: 1,
                            nombre: 'Martillo Profesional',
                            precio: 24.99,
                            stock: 50,
                            categoria: 'herramientas',
                            caracteristicas: 'Mango ergonómico; Cabeza de acero forjado; Peso: 500g; Longitud: 30cm',
                            descripcion: 'Martillo profesional con mango ergonómico para mayor comodidad. Ideal para trabajos de construcción y carpintería.',
                            imagen: '/Martillo.png',
                            fecha_creacion: new Date().toISOString()
                        },
                        {
                            id: 2,
                            nombre: 'Sierra Circular',
                            precio: 129.99,
                            stock: 15,
                            categoria: 'herramientas',
                            caracteristicas: 'Potencia: 1200W; Velocidad: 5000 RPM; Diámetro de disco: 185mm; Profundidad de corte: 65mm',
                            descripcion: 'Sierra circular potente y precisa para cortes en madera, plástico y aluminio. Incluye guía paralela y disco de corte.',
                            imagen: '/broca.png',
                            fecha_creacion: new Date().toISOString()
                        },
                        {
                            id: 3,
                            nombre: 'Taladro Inalámbrico',
                            precio: 89.99,
                            stock: 25,
                            categoria: 'herramientas',
                            caracteristicas: 'Batería: 18V Li-Ion; Velocidad: 0-1500 RPM; Torque: 50Nm; Incluye 2 baterías',
                            descripcion: 'Taladro inalámbrico potente y versátil para todo tipo de perforaciones. Incluye maletín, cargador y 2 baterías.',
                            imagen: '/flexo.jpg',
                            fecha_creacion: new Date().toISOString()
                        }
                    ];
                    localStorage.setItem('productos', JSON.stringify(productos));
                }
                cargarProductos(productos);
            }
        }

        // Cargar productos en la tabla
        function cargarProductos(productosAMostrar = productos) {
            tablaProductos.innerHTML = '';
            
            productosAMostrar.forEach(producto => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${producto.id}</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <img src="${producto.imagen}" alt="${producto.nombre}" class="h-10 w-10 rounded-full">
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${producto.nombre}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">$${producto.precio.toFixed(2)}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${producto.stock}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-${getCategoryColor(producto.categoria)}-100 text-${getCategoryColor(producto.categoria)}-800">
                            ${getCategoryName(producto.categoria)}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button data-id="${producto.id}" class="btn-editar text-blue-600 hover:text-blue-900 mr-3">Editar</button>
                        <button data-id="${producto.id}" class="btn-eliminar text-red-600 hover:text-red-900">Eliminar</button>
                    </td>
                `;
                tablaProductos.appendChild(tr);
            });

            // Agregar eventos a los botones de editar y eliminar
            document.querySelectorAll('.btn-editar').forEach(btn => {
                btn.addEventListener('click', editarProducto);
            });

            document.querySelectorAll('.btn-eliminar').forEach(btn => {
                btn.addEventListener('click', eliminarProducto);
            });
        }

        // Obtener color según categoría
        function getCategoryColor(categoria) {
            const colores = {
                'herramientas': 'blue',
                'construccion': 'yellow',
                'jardineria': 'green',
                'electricidad': 'purple',
                'plomeria': 'red'
            };
            return colores[categoria] || 'gray';
        }

        // Obtener nombre legible de categoría
        function getCategoryName(categoria) {
            const nombres = {
                'herramientas': 'Herramientas',
                'construccion': 'Construcción',
                'jardineria': 'Jardinería',
                'electricidad': 'Electricidad',
                'plomeria': 'Plomería'
            };
            return nombres[categoria] || categoria;
        }

        // Mostrar formulario para nuevo producto
        btnNuevoProducto.addEventListener('click', () => {
            formTitle.textContent = 'Nuevo Producto';
            productoForm.reset();
            productoId.value = '';
            formProducto.classList.remove('hidden');
            // Resetear la vista previa de imagen
            imagePreview.classList.add('hidden');
            dragText.classList.remove('hidden');
            base64Image = null;
            imagenInput.value = '';
        });
        
        // Configurar eventos para la carga de imágenes
        // Evento para abrir el selector de archivos al hacer clic en el contenedor
        imagePreviewContainer.addEventListener('click', () => {
            imageFileInput.click();
        });
        
        // Evento para mostrar vista previa al seleccionar archivo
        imageFileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                
                reader.onload = (e) => {
                    base64Image = e.target.result;
                    imagePreview.src = base64Image;
                    imagePreview.classList.remove('hidden');
                    dragText.classList.add('hidden');
                };
                
                reader.readAsDataURL(file);
            }
        });
        
        // Eventos para arrastrar y soltar
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            imagePreviewContainer.addEventListener(eventName, (e) => {
                e.preventDefault();
                e.stopPropagation();
            });
        });
        
        imagePreviewContainer.addEventListener('dragenter', () => {
            imagePreviewContainer.classList.add('border-blue-500');
        });
        
        imagePreviewContainer.addEventListener('dragleave', () => {
            imagePreviewContainer.classList.remove('border-blue-500');
        });
        
        imagePreviewContainer.addEventListener('drop', (e) => {
            imagePreviewContainer.classList.remove('border-blue-500');
            
            const file = e.dataTransfer.files[0];
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                
                reader.onload = (e) => {
                    base64Image = e.target.result;
                    imagePreview.src = base64Image;
                    imagePreview.classList.remove('hidden');
                    dragText.classList.add('hidden');
                };
                
                reader.readAsDataURL(file);
            }
        });

        // Cancelar formulario
        btnCancelar.addEventListener('click', () => {
            formProducto.classList.add('hidden');
            productoForm.reset();
            // Resetear la vista previa de imagen
            imagePreview.classList.add('hidden');
            dragText.classList.remove('hidden');
            base64Image = null;
            imagenInput.value = '';
        });

        // Editar producto
        async function editarProducto(e) {
            const id = parseInt(e.target.dataset.id);
            try {
                // Intentar obtener el producto desde la API con autenticación
                const producto = await getData(`/productos/${id}`);
                
                formTitle.textContent = 'Editar Producto';
                productoId.value = producto.id;
                document.getElementById('nombre').value = producto.nombre;
                document.getElementById('precio').value = producto.precio;
                document.getElementById('stock').value = producto.stock;
                document.getElementById('categoria').value = producto.categoria;
                document.getElementById('caracteristicas').value = producto.caracteristicas;
                document.getElementById('descripcion').value = producto.descripcion;
                document.getElementById('imagen').value = producto.imagen;
                
                // Mostrar la imagen existente en la vista previa
                if (producto.imagen) {
                    imagePreview.src = producto.imagen;
                    imagePreview.classList.remove('hidden');
                    dragText.classList.add('hidden');
                } else {
                    imagePreview.classList.add('hidden');
                    dragText.classList.remove('hidden');
                }
                
                formProducto.classList.remove('hidden');
            } catch (error) {
                console.error('Error:', error);
                // Si hay un error con la API, buscar en el array local
                const producto = productos.find(p => p.id === id);
                
                if (producto) {
                    formTitle.textContent = 'Editar Producto';
                    productoId.value = producto.id;
                    document.getElementById('nombre').value = producto.nombre;
                    document.getElementById('precio').value = producto.precio;
                    document.getElementById('stock').value = producto.stock;
                    document.getElementById('categoria').value = producto.categoria;
                    document.getElementById('caracteristicas').value = producto.caracteristicas;
                    document.getElementById('descripcion').value = producto.descripcion;
                    document.getElementById('imagen').value = producto.imagen;
                    
                    // Mostrar la imagen existente en la vista previa
                    if (producto.imagen) {
                        imagePreview.src = producto.imagen;
                        imagePreview.classList.remove('hidden');
                        dragText.classList.add('hidden');
                    } else {
                        imagePreview.classList.add('hidden');
                        dragText.classList.remove('hidden');
                    }
                    
                    formProducto.classList.remove('hidden');
                }
            }
        }

        // Eliminar producto
        async function eliminarProducto(e) {
            const id = parseInt(e.target.dataset.id);
            if (confirm('¿Está seguro de eliminar este producto?')) {
                try {
                    // Intentar eliminar el producto a través de la API con autenticación
                    await deleteData(`/productos/${id}`);
                    
                    // Actualizar la lista de productos
                    obtenerProductos();
                } catch (error) {
                    console.error('Error:', error);
                    // Si hay un error con la API, eliminar del array local
                    productos = productos.filter(p => p.id !== id);
                    localStorage.setItem('productos', JSON.stringify(productos));
                    cargarProductos();
                }
            }
        }

        // Buscar productos
        btnBuscar.addEventListener('click', buscarProductos);
        buscador.addEventListener('keyup', (e) => {
            if (e.key === 'Enter') {
                buscarProductos();
            }
        });

        function buscarProductos() {
            const termino = buscador.value.toLowerCase().trim();
            if (termino === '') {
                cargarProductos();
                return;
            }

            const resultados = productos.filter(producto => 
                producto.nombre.toLowerCase().includes(termino) ||
                producto.descripcion.toLowerCase().includes(termino) ||
                producto.caracteristicas.toLowerCase().includes(termino) ||
                getCategoryName(producto.categoria).toLowerCase().includes(termino)
            );

            cargarProductos(resultados);
        }

        // Guardar producto (crear o actualizar)
        productoForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const id = productoId.value ? parseInt(productoId.value) : null;
            const nombre = document.getElementById('nombre').value;
            const precio = parseFloat(document.getElementById('precio').value);
            const stock = parseInt(document.getElementById('stock').value);
            const categoria = document.getElementById('categoria').value;
            const caracteristicas = document.getElementById('caracteristicas').value;
            const descripcion = document.getElementById('descripcion').value;
            let imagen = document.getElementById('imagen').value;
            
            try {
                // Si hay una imagen en base64, subirla a Cloudinary primero
                if (base64Image) {
                    try {
                        const formData = new FormData();
                        formData.append('image_data', base64Image);
                        
                        // Usar fetchWithAuth directamente para este caso especial con FormData
                        const token = localStorage.getItem('token');
                        const headers = token ? { 'Authorization': `Bearer ${token}` } : {};
                        
                        const uploadResponse = await fetch(`${API_URL}/upload-image-base64`, {
                            method: 'POST',
                            credentials: 'include',
                            mode: 'cors',
                            headers,
                            body: formData
                        });
                        
                        if (!uploadResponse.ok) {
                            throw new Error('Error al subir la imagen');
                        }
                        
                        const uploadData = await uploadResponse.json();
                        imagen = uploadData.url; // Actualizar la URL de la imagen con la de Cloudinary
                    } catch (uploadError) {
                        console.error('Error al subir imagen:', uploadError);
                        alert('Error al subir la imagen. Se usará la URL actual si existe.');
                    }
                }
                
                // Si no hay imagen, usar una por defecto
                if (!imagen) {
                    imagen = '/Martillo.png';
                }
                
                const productoData = {
                    nombre,
                    precio,
                    stock,
                    categoria,
                    caracteristicas,
                    descripcion,
                    imagen
                };
                
                let response;
                
                if (id) {
                    // Actualizar producto existente a través de la API con autenticación
                    response = await updateData(`/productos/${id}`, productoData);
                } else {
                    // Crear nuevo producto a través de la API con autenticación
                    response = await postData('/productos', productoData);
                }
                
                if (!response) {
                    throw new Error('Error al guardar el producto');
                }
                
                // Mostrar mensaje de éxito
                alert(id ? 'Producto actualizado correctamente' : 'Producto creado correctamente');
                
                // Actualizar la lista de productos
                obtenerProductos();
                
                // Ocultar formulario y resetear
                formProducto.classList.add('hidden');
                productoForm.reset();
                imagePreview.classList.add('hidden');
                dragText.classList.remove('hidden');
                base64Image = null;
            } catch (error) {
                console.error('Error:', error);
                alert(`Error: ${error.message}`);
                
                // Si hay un error con la API, guardar en localStorage
                if (id) {
                    // Actualizar producto existente
                    const index = productos.findIndex(p => p.id === id);
                    if (index !== -1) {
                        productos[index] = {
                            ...productos[index],
                            nombre,
                            precio,
                            stock,
                            categoria,
                            caracteristicas,
                            descripcion,
                            imagen
                        };
                    }
                } else {
                    // Crear nuevo producto
                    const nuevoId = productos.length > 0 ? Math.max(...productos.map(p => p.id)) + 1 : 1;
                    productos.push({
                        id: nuevoId,
                        nombre,
                        precio,
                        stock,
                        categoria,
                        caracteristicas,
                        descripcion,
                        imagen,
                        fecha_creacion: new Date().toISOString()
                    });
                }
                
                localStorage.setItem('productos', JSON.stringify(productos));
                cargarProductos();
                
                // Ocultar formulario y resetear
                formProducto.classList.add('hidden');
                productoForm.reset();
                imagePreview.classList.add('hidden');
                dragText.classList.remove('hidden');
                base64Image = null;
            }
        });

        // Cargar productos al iniciar
        obtenerProductos();
    });
</script>