---
import AdminLayout from '../../../layouts/AdminLayout.astro';
---

<AdminLayout title="Ejemplo de Cloudinary">
    <div class="mb-6">
        <h1 class="text-2xl font-bold text-gray-800">Ejemplo de Carga de Imágenes con Cloudinary</h1>
        <p class="text-gray-600 mt-2">Este ejemplo muestra cómo cargar imágenes a Cloudinary desde el frontend.</p>
    </div>

    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 class="text-xl font-semibold mb-4">Cargar Imagen</h2>
        
        <!-- Formulario para cargar imagen con archivo -->
        <div class="mb-6">
            <h3 class="text-lg font-medium mb-2">Método 1: Cargar archivo</h3>
            <form id="uploadForm" class="space-y-4">
                <div>
                    <label for="imageFile" class="block text-sm font-medium text-gray-700 mb-1">Seleccionar imagen</label>
                    <input type="file" id="imageFile" name="file" accept="image/*" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>
                <div>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">Subir Imagen</button>
                </div>
            </form>
        </div>

        <!-- Formulario para cargar imagen con base64 -->
        <div>
            <h3 class="text-lg font-medium mb-2">Método 2: Cargar con vista previa</h3>
            <form id="uploadBase64Form" class="space-y-4">
                <div>
                    <label for="imagePreview" class="block text-sm font-medium text-gray-700 mb-1">Vista previa</label>
                    <div id="imagePreviewContainer" class="border-2 border-dashed border-gray-300 rounded-md p-4 text-center">
                        <img id="imagePreview" class="max-h-64 mx-auto hidden">
                        <p id="dragText" class="text-gray-500">Arrastra una imagen aquí o haz clic para seleccionar</p>
                        <input type="file" id="imageFilePreview" accept="image/*" class="hidden">
                    </div>
                </div>
                <div>
                    <button type="submit" id="uploadBase64Button" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300" disabled>Subir Imagen</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Resultados -->
    <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Imágenes Subidas</h2>
        <div id="uploadedImages" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <!-- Las imágenes subidas se mostrarán aquí -->
            <p class="text-gray-500 col-span-full text-center">No hay imágenes subidas aún</p>
        </div>
    </div>
</AdminLayout>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Elementos del DOM
        const uploadForm = document.getElementById('uploadForm');
        const uploadBase64Form = document.getElementById('uploadBase64Form');
        const imagePreviewContainer = document.getElementById('imagePreviewContainer');
        const imagePreview = document.getElementById('imagePreview');
        const imageFilePreview = document.getElementById('imageFilePreview');
        const dragText = document.getElementById('dragText');
        const uploadBase64Button = document.getElementById('uploadBase64Button');
        const uploadedImages = document.getElementById('uploadedImages');

        // URL de la API - Determinar según el entorno
        const API_URL = typeof window !== 'undefined' && 
            (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') 
            ? 'https://api.render.com/deploy/srv-d1j3t42dbo4c73c3oed0?key=8xmbZwA9YQo' 
            : 'http://localhost:8000';
        let base64Image = null;

        // Función para mostrar las imágenes subidas
        function addUploadedImage(url) {
            // Eliminar el mensaje de "No hay imágenes" si existe
            const noImagesMessage = uploadedImages.querySelector('p');
            if (noImagesMessage) {
                noImagesMessage.remove();
            }

            // Crear el elemento para mostrar la imagen
            const imageContainer = document.createElement('div');
            imageContainer.className = 'border rounded-md overflow-hidden';
            imageContainer.innerHTML = `
                <img src="${url}" alt="Imagen subida" class="w-full h-48 object-cover">
                <div class="p-2">
                    <div class="flex justify-between items-center">
                        <a href="${url}" target="_blank" class="text-blue-600 hover:underline text-sm">Ver imagen</a>
                        <button class="text-red-600 hover:text-red-800 text-sm">Eliminar</button>
                    </div>
                </div>
            `;

            // Agregar la imagen al contenedor
            uploadedImages.prepend(imageContainer);
        }

        // Método 1: Subir archivo directamente
        uploadForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const fileInput = document.getElementById('imageFile');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('Por favor selecciona una imagen');
                return;
            }
            
            const formData = new FormData();
            formData.append('file', file);
            
            try {
                const response = await fetch(`${API_URL}/upload-image`, {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) {
                    throw new Error('Error al subir la imagen');
                }
                
                const data = await response.json();
                addUploadedImage(data.url);
                fileInput.value = '';
                
                alert('Imagen subida correctamente');
            } catch (error) {
                console.error('Error:', error);
                alert('Error al subir la imagen');
            }
        });

        // Método 2: Vista previa y subir como base64
        // Evento para mostrar vista previa al seleccionar archivo
        imageFilePreview.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                
                reader.onload = (e) => {
                    base64Image = e.target.result;
                    imagePreview.src = base64Image;
                    imagePreview.classList.remove('hidden');
                    dragText.classList.add('hidden');
                    uploadBase64Button.disabled = false;
                };
                
                reader.readAsDataURL(file);
            }
        });

        // Evento para abrir el selector de archivos al hacer clic en el contenedor
        imagePreviewContainer.addEventListener('click', () => {
            imageFilePreview.click();
        });

        // Eventos para arrastrar y soltar
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            imagePreviewContainer.addEventListener(eventName, (e) => {
                e.preventDefault();
                e.stopPropagation();
            });
        });

        imagePreviewContainer.addEventListener('dragenter', () => {
            imagePreviewContainer.classList.add('border-blue-500');
        });

        imagePreviewContainer.addEventListener('dragleave', () => {
            imagePreviewContainer.classList.remove('border-blue-500');
        });

        imagePreviewContainer.addEventListener('drop', (e) => {
            imagePreviewContainer.classList.remove('border-blue-500');
            
            const file = e.dataTransfer.files[0];
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                
                reader.onload = (e) => {
                    base64Image = e.target.result;
                    imagePreview.src = base64Image;
                    imagePreview.classList.remove('hidden');
                    dragText.classList.add('hidden');
                    uploadBase64Button.disabled = false;
                };
                
                reader.readAsDataURL(file);
            }
        });

        // Subir imagen en base64
        uploadBase64Form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!base64Image) {
                alert('Por favor selecciona una imagen');
                return;
            }
            
            try {
                const formData = new FormData();
                formData.append('image_data', base64Image);
                
                const response = await fetch(`${API_URL}/upload-image-base64`, {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) {
                    throw new Error('Error al subir la imagen');
                }
                
                const data = await response.json();
                addUploadedImage(data.url);
                
                // Resetear la vista previa
                imagePreview.classList.add('hidden');
                dragText.classList.remove('hidden');
                base64Image = null;
                uploadBase64Button.disabled = true;
                
                alert('Imagen subida correctamente');
            } catch (error) {
                console.error('Error:', error);
                alert('Error al subir la imagen');
            }
        });
    });
</script>